//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void poisson_kernel_stencil(const ptr_float u,
  const ptr_float f,
  ptr_float u2, const float dx, const float dy)
{



  OPS_ACCS(u2, 0,0) = ((OPS_ACCS(u, -1,0)+OPS_ACCS(u, 1,0))*dx*dx
                     + (OPS_ACCS(u, 0,-1)+OPS_ACCS(u, 0,1))*dy*dy
                     - dx*dx*dy*dy*OPS_ACCS(f, 0,0))
                     /(2.0*(dx*dx+dy*dy));
}


__kernel void ops_poisson_kernel_stencil(
__global const float* restrict arg0,
__global const float* restrict arg1,
__global float* restrict arg2,
const float dx,
const float dy,
const int base0,
const int base1,
const int base2,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    const ptr_float ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_poisson_kernel_stencil], xdim0_poisson_kernel_stencil};
    const ptr_float ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_poisson_kernel_stencil], xdim1_poisson_kernel_stencil};
    ptr_float ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_poisson_kernel_stencil], xdim2_poisson_kernel_stencil};
    poisson_kernel_stencil(ptr0,
                   ptr1,
                   ptr2,
                   dx,
                   dy);
  }

}
